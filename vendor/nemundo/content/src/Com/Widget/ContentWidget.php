<?php

namespace Nemundo\Content\Com\Widget;


use Nemundo\Content\Action\ContentActionTrait;
use Nemundo\Content\Builder\ContentViewBuilder;
use Nemundo\Content\Com\Dropdown\ContentActionDropdown;
use Nemundo\Content\Index\Tree\Com\Dropdown\RestrictedContentTypeDropdown;
use Nemundo\Content\Index\Tree\Com\Dropdown\ViewChangeDropdown;
use Nemundo\Content\Index\Tree\Data\RestrictedContentType\RestrictedContentTypeCount;
use Nemundo\Content\Parameter\ContentParameter;
use Nemundo\Content\Site\ContentNewSite;
use Nemundo\Content\Type\AbstractContentType;
use Nemundo\Html\Block\Div;
use Nemundo\Html\Formatting\Italic;
use Nemundo\Html\Heading\H5;
use Nemundo\Html\Inline\Span;
use Nemundo\Package\Bootstrap\Card\BootstrapCard;
use Nemundo\Package\Bootstrap\Dropdown\BootstrapSiteDropdown;
use Nemundo\Package\Bootstrap\Utility\BootstrapSpacing;
use Nemundo\Web\Site\AbstractSite;

class ContentWidget extends BootstrapCard  // AdminWidget
{

    use ContentActionTrait;

    /**
     * @var AbstractContentType
     */
    public $contentType;
//content


    /**
     * @var bool
     */
    public $editable = true;


    public $viewId;

    public $showHeader = true;

    /**
     * @var bool
     */
    public $showMenu = true;

    public $widgetTitle;

    /**
     * @var bool
     */
    public $loadAction = false;

    /**
     * @var AbstractSite
     */
    public $redirectSite;


    /**
     * @var BootstrapSiteDropdown
     */
    public $actionDropdown;


    protected function loadContainer()
    {
        parent::loadContainer(); // TODO: Change the autogenerated stub

        $this->actionDropdown = new ContentActionDropdown();  // ($divTitle);  // ($divMenu);


    }


    public function getContent()
    {

        $this->addCssClass(BootstrapSpacing::MARIGN_3);

        $div = new Div($this->cardHeader);
        $div->addCssClass('d-flex justify-content-between align-items-center');
        //$div->addCssClass('d-flex justify-content-between align-items-left');

        //$divTitle = new Div($div);



        $title = $this->widgetTitle;
        if ($title == null) {
            $title = $this->contentType->getSubject();
        }

        $leftDiv = new Div($div);
        $leftDiv->addCssClass('d-flex flex-row bd-highlight mb-3');

        $h5 = new H5($leftDiv);  // ($divTitle);
        $h5->content = $title;
        $h5->addCssClass('p-2 bd-highlight');

        if ($this->editable) {
            $dropdown = new ViewChangeDropdown($leftDiv);
            $dropdown->contentType = $this->contentType;
            $dropdown->redirectSite = $this->redirectSite;
            $dropdown->showToggle=false;
            $dropdown->addCssClass('p-2 bd-highlight');

            $i = new Italic($dropdown->dropdownButton);
            $i->addCssClass('fa fa-angle-down');


        }


        //if ($this->showMenu) {

        //$divMenu = new Div($divTitle);

        /*
        $dropdown = new RestrictedContentTypeDropdown($divMenu);
        $dropdown->redirectSite = clone(ContentNewSite::$site);
        $dropdown->redirectSite->addParameter(new ContentParameter($this->contentType->getContentId()));
        $dropdown->contentTypeId = $this->contentType->typeId;*/


        /*
        $dropdown = new BootstrapSiteDropdown($divMenu);

        //$dropdown->showToggle=false;

        $i = new Italic($dropdown->dropdownButton);
        $i->addCssClass('fa fa-file');

        $reader = new ContentViewReader();
        $reader->filter->andEqual($reader->model->contentTypeId, $this->contentType->typeId);
        $reader->addOrder($reader->model->viewName);
        foreach ($reader->getData() as $viewRow) {

            if ($this->redirectSite !== null) {

                $site = clone($this->redirectSite);
                $site->title = $viewRow->viewName;
                $site->addParameter(new ContentParameter());
                $site->addParameter(new ContentViewParameter($viewRow->id));

                //(new Debug())->write($site->getUrl());
                //(new Debug())->write($viewRow->id);


                $dropdown->addSite($site);
            }

            //$dropdown->addItem($viewRow->viewName,'');
            //$this->addItem($viewRow->id, $viewRow->viewName);

        }*/


        //   $dropdown = new ContentActionDropdown($div);  // ($divTitle);  // ($divMenu);


        if ($this->editable) {

            $div->addContainer($this->actionDropdown);


            $this->actionDropdown->contentId = $this->contentType->getContentId();
            $this->actionDropdown->showToggle = false;

            /*
            foreach ($this->getContentActionList() as $action) {
                $dropdown->addContentAction($action);
            }*/


            /*
            $site = clone(ChildOrderSite::$site);
            $site->addParameter(new ContentParameter());
            $this->actionDropdown->addSite($site);
    */


            //$this->actionDropdown->addSeperator();

            if ($this->loadAction) {
            $this->actionDropdown->addDefaultAction();
            }


            $i = new Italic($this->actionDropdown->dropdownButton);
            $i->addCssClass('fa fa-ellipsis-v');


            //}


            $div = new Div($this);
            $div->addCssClass('btn-group');

//            <div class="btn-group">


            $count = new RestrictedContentTypeCount();
            $count->filter->andEqual($count->model->contentTypeId, $this->contentType->typeId);
            if ($count->getCount() > 0) {

                $dropdown = new RestrictedContentTypeDropdown($div);
                $dropdown->redirectSite = clone(ContentNewSite::$site);
                $dropdown->redirectSite->addParameter(new ContentParameter($this->contentType->getContentId()));
                $dropdown->contentTypeId = $this->contentType->typeId;
//$dropdown->icon='bi bi-plus';
                $dropdown->icon = 'fa fa-plus';
                $dropdown->showToggle = false;

                $dropdown->addCssClass(BootstrapSpacing::MARIGN_RIGHT_5);
                //$i = new Italic($dropdown);
                //$i->addCssClass('fa fa-plus');


            }


            // Plus Icon



        }


        /*
        $dropdown = new BootstrapSiteDropdown($this);

        //$dropdown->showToggle=false;

        $i = new Italic($dropdown->dropdownButton);
        $i->addCssClass('fa fa-file');

        $reader = new ContentViewReader();
        $reader->filter->andEqual($reader->model->contentTypeId, $this->contentType->typeId);
        $reader->addOrder($reader->model->viewName);
        foreach ($reader->getData() as $viewRow) {

            if ($this->redirectSite !== null) {

                $site = clone($this->redirectSite);
                $site->title = $viewRow->viewName;
                $site->addParameter(new ContentParameter());
                $site->addParameter(new ContentViewParameter($viewRow->id));

                //(new Debug())->write($site->getUrl());
                //(new Debug())->write($viewRow->id);


                $dropdown->addSite($site);
            }

            //$dropdown->addItem($viewRow->viewName,'');
            //$this->addItem($viewRow->id, $viewRow->viewName);

        }*/


        $div = new Div($this);


        $view = null;
        if ($this->viewId == null) {

            $view = $this->contentType->getDefaultView($div);

        } else {

            $builder = new ContentViewBuilder();
            $builder->contentType = $this->contentType;
            $builder->viewId = $this->viewId;
            $view = $builder->getView($div);

        }

        $view->redirectSite = $this->redirectSite;

        return parent::getContent();

    }


}